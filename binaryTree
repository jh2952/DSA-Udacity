class Node(object):
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class BinaryTree(object):
    def __init__(self, root):
        self.root = Node(root)

    def search(self, find_val):
        return self.preorder_search(self.root, find_val)

    def print_tree(self):
        """Print out all tree nodes
        as they are visited in
        a pre-order traversal."""
        return self.preorder_print(self.root, "")

    def preorder_search(self, start, find_val):
        """Helper method - use this to create a 
        recursive search solution."""
        
        current = start
        
        if current.value == find_val:
            return True
        
        if current.left is not None and self.preorder_search(current.left, find_val):
            return True
        if current.right is not None and self.preorder_search(current.right, find_val):
            return True
        
        return False

    def preorder_print(self, start, traversal):
        """Helper method - use this to create a 
        recursive print solution."""
        
        current = start
        
        if current:
            traversal += str(current.value)
            traversal = self.preorder_print(current.left, traversal)
            traversal = self.preorder_print(current.right, traversal)

        return traversal
